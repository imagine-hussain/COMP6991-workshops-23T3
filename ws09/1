use std::cell::RefCell;

use libc::{c_char, c_double, c_int, fclose, fgets, fopen, fscanf, FILE};

struct File {
    // todo!()
}

/// This function converts a string into a Vec<i8> which can
/// be used to represent a c-string.
///
/// To turn this into a *mut c_char, use Vec<i8>::as_mut_ptr().
fn to_c_string(string: &str) -> Vec<i8> {
    let bytes: Vec<u8> = String::from(string).into_bytes();
    let mut c_chars: Vec<i8> = bytes.iter().map(|c| *c as i8).collect();

    c_chars.push(0); // null terminator

    c_chars
}

impl File {
    fn open(_path: &str) -> Option<Self> {
        todo!()
    }

    fn read_string(&mut self) -> Option<String> {
        todo!()
    }

    fn read_i64(&mut self) -> Option<i64> {
        todo!()
    }

    fn read_f64(&mut self) -> Option<f64> {
        todo!()
    }

    fn read_char(&mut self) -> Option<char> {
        todo!()
    }
}

impl Drop for File {
    fn drop(&mut self) {
        println!("Dropping file.");
    }
}

fn main() {
    let mut file = File::open("data/test_file.txt").expect("Could not open file.");
    let s = file.read_string().unwrap();
    let i = file.read_i64().unwrap();
    let f = file.read_f64().unwrap();
    let c = file.read_char().unwrap();

    println!("{s} {i} {f} {c}");
}

// fn dp(cache, x) {
//     if x == 0 {
//         return cache.lock().unwrap()[0]
//     }
//     return cache.lock().unwrap()[x] + dp(cache, x - 1);
//     //            ^ guard                 ^ recursive call
// }
//
// struct Foo {
//     lcok: ReEntrant<T>
// }
//
// impl Foo {
//     fn f1(&self) {
//         lock.f1();
//         let mut lock = self.lock.lock().unwrap();
//     }
//
// }
//
//
struct Foo {
    inner: RefCell<i32>,
}

unsafe trait MyTrait {}

// WHAT??????????/
//
// Unsound vs Unsafe??????
// - sound: proper functioning code - does what we want
//  - No UB
//- safe:
//  - subset of sound code
//  - code that the compiler can guarantee is sound
//- unsafe code:
//  - *can* be unsound
//  - *can* be sound
//  - the COMPILEr cant check soudnness
//  - the USER must check soundness
//
// - There is code that is SOUND but, is not SAFE
// - Keeps possible "unsound" code in specificically marked regions
//
// FIVE unsafe superpowers:
//  - Dereference a raw pointer
//  - Call an unsafe function or method
//  - Access or modify a mutable static variable
//  - Implement an unsafe trait
//  - Access fields of unions
//
// Safe abstractions over unsafe code

// does rust give u file pointers?
// -
//
// fn foo() {}
//
// unsafe functionso vs block
//
// why?
fn pointer() {
    let x = String::new();
    let p_raw = &x as *const String;
    let p_mut: *mut String = p_raw as *mut String;
    drop(x);
    // # Safety
    // AHJJJJJJJJJJ
    unsafe {
        (*p_mut).push('h');
    };
}

fn foo() {
    scaryyyyyyyyyyy();
    pointer();
}

unsafe fn scaryyyyyyyyyyy() {
    let x = String::new();
    let p_raw = &x as *const String;
    let p_mut: *mut String = p_raw as *mut String;
    drop(x);
    (*p_mut).push('h');
}
